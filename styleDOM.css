/* This visually shows the layout of a page like bording. Works well for text */

* {
  background-color: rgba(255, 0, 0, .2);
}

* * {
  background-color: rgba(0, 255, 0, .2);
}

* * * {
  background-color: rgba(0, 0, 255, .2);
}

* * * * {
  background-color: rgba(255, 0, 255, .2);
}

* * * * * {
  background-color: rgba(0, 255, 255, .2);
}

* * * * * * {
  background-color: rgba(255, 255, 0, .2);
}

* * * * * * * {
  background-color: rgba(255, 0, 0, .2);
}

* * * * * * * * {
  background-color: rgba(0, 255, 0, .2);
}

* * * * * * * * * {
  background-color: rgba(0, 0, 255, .2);
}


/* Comment body out for the site to work */

body {
  text-align: center;
  font-size: 32px;
  background-color: yellow;
  color: blue;
}


/* To get divs to align across the screen evenly */

.exp-Pokidex-cards {
  display: flex;
  justify-content: space-evenly;
  flex-wrap: wrap;
}


/* Float 2 divs side-by-side. See Train Schedule fr full example */

.container-for-current-time {
  margin: auto;
  padding-top: 5px;
  margin-bottom: -10px;
  text-align: center;
}

#current-time {
  color: red;
  width: 150px;
  margin: auto;
  float: left;
}

#current-time-dom {
  float: right;
  color: red;
  width: 150px;
  margin: auto;
}


/* For deleting (hiding) an element*/

.delete {
  display: none;
}


/* for making the cursor a pointerhovering over the selected item */

#list:hover {
  cursor: pointer;
}


/* outline property creates nice frames around a div. See CSS tutorials and grid file for indepth */

#div1 {
  height: 100px;
  width: 100px;
  background-color: orange;
  margin: auto;
  border: 10px solid white;
  outline: 10px dotted black;
}


/* Make something spin */

#test {
  height: 200px;
  width: 200px;
  background-color: rgba(85, 139, 203, 1);
  margin: 0 auto;
  position: relative;
  animation: pulse 3s infinite;
}

@keyframes stretch {
  0% {
    background-color: rgba(247, 160, 211, 1);
    transform: rotate(360deg);
  }
  100% {
    background-color: rgba(122, 79, 176, 1);
    transform: rotate(-360deg);
  }
}


/* Make something slide */

#test {
  height: 200px;
  width: 200px;
  background-color: rgba(85, 139, 203, 1);
  margin: 0 auto;
  position: relative;
  animation: nudge 3s linear infinite alternate;
}

@keyframes nudge {
  0% {
    transform: translate(150px, 0);
  }
  100% {
    transform: translate(-150px, 0);
  }
}


/* Centering a div inside a container (manual - had to p[ay arpoind with this) */

#test {
  height: 200px;
  width: 200px;
  background-color: rgba(85, 139, 203, 1);
  margin: 0 auto;
  position: relative;
}

#testTwo {
  height: 50px;
  width: 50px;
  background-color: rgba(122, 79, 176, 1);
  margin: 0 auto;
  position: absolute;
  top: 38%;
  left: 25%;
}


/* Using CSS Grid Generator to create a template grid. NOTE - height: 100vh; means te grid will fill the whole page */

.parent {
  display: grid;
  grid-template-columns: 100px 1fr 1fr 200px;
  grid-template-rows: 75px 1fr 75px;
  grid-column-gap: 10px;
  grid-row-gap: 10px;
}

.div1 {
  grid-area: 1 / 1 / 2 / 5;
}

.div2 {
  grid-area: 2 / 1 / 3 / 2;
}

.div3 {
  grid-area: 2 / 2 / 3 / 4;
}

.div4 {
  grid-area: 2 / 4 / 3 / 5;
}

.div5 {
  grid-area: 3 / 1 / 4 / 5;
}


/* Makes the cursor turn into a point upon hover */

#someID {
  cursor: pointer;
}


/* /* CHEAT SHEET FROM MEDIUM: */


/* Default positioning for all elements. */


/* Puts element in normal flow.  */

.someClass {
  position: static;
}


/* Can be offset with top, right, bottom and left. */


/* Offset relative to itself. */


/* Creates relative-type positioning context for children. */

.someClass {
  position: relative;
}


/* Can be offset with top, right, bottom and left. */


/* Offset relative to its nearest relative-type positioned parent. */


/* Creates relative-type positioning context for children. */

.someClass {
  position: absolute;
}


/* Can be offset with top, right, bottom and left. */


/* Offset relative to the viewport. */


/* Creates relative-type positioning context for children. */

.someClass {
  position: fixed
}


/* For setting max height with jQuery's accordian */

#accordion .ui-accordion-content {
  max-height: 400px;
}


/* Good hover effect */

.Pokecard img {
  transition: all ease 500ms;
}

.Pokicard img:hover {
  transform: scale(1.25);
  opacity: 0.75;
}


/* Another good hover effect From class. See 17-react (activity 05 for details) */

.crystal:hover {
  transform: rotate(135deg) scale(1.2);
  transition: .5s all;
}

.crystal:active {
  transform: rotate(135deg) scale(1);
  transition: .2s all;
}


/* Flipping a card or any div (see My_React_Practice) */

.card-container, .front, .back {
  width: 20rem;
  height: 20rem;
}

.card-container {
  margin: 5rem;
  position: relative;
  perspective: 75rem;
}

.front, .back {
  box-sizing: border-box;
  padding: 2rem;
  border-radius: 4px;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, .25);
  font-family: BlinkMacSystemFont, "Segoe UI", sans-serif;
  font-size: 2rem;
  color: #fff;
  text-transform: uppercase;
  text-align: center;
  position: absolute;
  top: 0;
  left: 0;
  backface-visibility: hidden;
  overflow: hidden;
  transition: transform .8s ease;
}

.back {
  transform: rotateY(180deg);
}

.card-container:hover .front {
  transform: rotateY(-180deg);
}

.card-container:hover .back {
  transform: rotateY(0deg);
}


/* front side bg is green gradient */

.front {
  background-image: linear-gradient(to right bottom, #2ecc71, #229955);
}


/* back side bg is orange gradient */

.back {
  background-image: linear-gradient(to right bottom, #f1c40f, #e67e22);
}


/* 3D Cube Transformation */

.scene {
  width: 200px;
  height: 200px;
  perspective: 600px;
  margin: 0 auto;
  border: 1px solid red;
}

.box {
  width: 200px;
  height: 200px;
  position: relative;
  transform-style: preserve-3d;
  transform: translateZ(-100px);
  transition: transform 1s;
}

.box.show-front {
  transform: translateZ(-100px) rotateY(0deg);
}

.box.show-right {
  transform: translateZ(-100px) rotateY(-90deg);
}

.box.show-back {
  transform: translateZ(-100px) rotateY(-180deg);
}

.box.show-left {
  transform: translateZ(-100px) rotateY(90deg);
}

.box.show-top {
  transform: translateZ(-100px) rotateX(-90deg);
}

.box.show-bottom {
  transform: translateZ(-100px) rotateX(90deg);
}

.box__face {
  position: absolute;
  width: 200px;
  height: 200px;
  line-height: 200px;
  text-align: center;
  border: 1px solid black;
}

.box__face--front {
  background: hsla( 0, 100%, 50%, 0.7);
}

.box__face--right {
  background: hsla( 60, 100%, 50%, 0.7);
}

.box__face--back {
  background: hsla(120, 100%, 50%, 0.7);
}

.box__face--left {
  background: hsla(180, 100%, 50%, 0.7);
}

.box__face--top {
  background: hsla(240, 100%, 50%, 0.7);
}

.box__face--bottom {
  background: hsla(300, 100%, 50%, 0.7);
}

.radio-group {
  text-align: center;
}

.box__face--front {
  transform: rotateY(0deg) translateZ(100px);
}

.box__face--right {
  transform: rotateY(90deg) translateZ(100px);
}

.box__face--back {
  transform: rotateY(180deg) translateZ(100px);
}

.box__face--left {
  transform: rotateY(-90deg) translateZ(100px);
}

.box__face--top {
  transform: rotateX(90deg) translateZ(100px);
}

.box__face--bottom {
  transform: rotateX(-90deg) translateZ(100px);
}